import msprime
import numpy as np
import stdpopsim

_species = stdpopsim.get_species("PapAnu")


def _pap_anu():
    # the size during the interval times[k] to times[k+1] = sizes[k]
    times = np.array(
        [
            0.0000,
            122.4133,
            131.8160,
            141.9409,
            152.8436,
            164.5836,
            177.2255,
            190.8383,
            205.4968,
            221.2812,
            238.2781,
            256.5804,
            276.2886,
            297.5106,
            320.3627,
            344.9701,
            371.4676,
            400.0004,
            430.7248,
            463.8092,
            499.4349,
            537.7970,
            579.1057,
            623.5874,
            671.4857,
            723.0632,
            778.6024,
            838.4076,
            902.8066,
            972.1520,
            1046.8240,
            1127.2316,
            1213.8153,
            1307.0497,
            1407.4455,
            1515.5528,
            1631.9639,
            1757.3167,
            1892.2979,
            2037.6472,
            2194.1609,
            2362.6966,
            2544.1776,
            2739.5984,
            2950.0297,
            3176.6244,
            3420.6241,
            3683.3656,
            3966.2886,
            4270.9432,
            4598.9986,
            4952.2522,
            5332.6396,
            5742.2450,
            6183.3125,
            6658.2589,
            7169.6864,
            7720.3971,
            8313.4085,
            8951.9696,
            9639.5793,
            10380.0050,
            11177.3035,
            12035.8432,
            12960.3283,
            13955.8240,
            15027.7847,
            16182.0838,
            17425.0457,
            18763.4807,
            20204.7223,
            21756.6671,
            23427.8183,
            25227.3323,
            27165.0688,
            29251.6447,
            31498.4925,
            33917.9230,
            36523.1924,
            39328.5751,
            42349.4420,
            45602.3447,
            49105.1060,
            52876.9180,
            56938.4466,
            61311.9452,
            66021.3766,
            71092.5441,
            76553.2330,
            82433.3628,
            88765.1513,
            95583.2907,
            102925.1382,
            110830.9203,
            119343.9533,
            128510.8808,
            138381.9292,
            149011.1826,
            160456.8795,
            172781.7318,
            186053.2682,
        ]
    )
    sizes = np.array(
        [
            335505.4808,
            335505.4808,
            335505.4808,
            335505.4808,
            335505.4808,
            335505.4808,
            335505.4808,
            335505.4808,
            335505.4808,
            120758.1302,
            120758.1302,
            120758.1302,
            120758.1302,
            120758.1302,
            120758.1302,
            120758.1302,
            120758.1302,
            120758.1302,
            120758.1302,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            51822.58297,
            41841.54229,
            41841.54229,
            41841.54229,
            41841.54229,
            41841.54229,
            41841.54229,
            41841.54229,
            41841.54229,
            41841.54229,
            41841.54229,
            41841.54229,
            41841.54229,
            41841.54229,
            30714.33863,
            30714.33863,
            30714.33863,
            30714.33863,
            30714.33863,
            30714.33863,
            30714.33863,
            30714.33863,
            72998.86202,
            72998.86202,
            72998.86202,
            72998.86202,
            72998.86202,
            72998.86202,
            55968.42221,
            55968.42221,
            55968.42221,
            55968.42221,
            55968.42221,
            55968.42221,
            55968.42221,
            93362.02606,
        ]
    )

    demographic_events = []
    for sz, t in zip(sizes, times):
        demographic_events.append(
            msprime.PopulationParametersChange(time=t, initial_size=sz, population_id=0)
        )
    populations = [
        stdpopsim.Population(
            id="PAnubis_SNPRC",
            description="Papio Anubis population from SNPRC",
        )
    ]

    return stdpopsim.DemographicModel(
        id="SinglePopSMCpp_1W22",
        description="SMC++ estimates of N(t) for Papio Anubis individuals",
        long_description="""
        These estimates were obtained from a sample Papio Anubis
        individuals from the colony housed at the Southwest National
        Primate Research Center (SNPRC). SMC++ was run with a subset of
        36 individuals from the population.
        """,
        populations=populations,
        citations=[
            stdpopsim.Citation(
                doi="https://doi.org/10.1093/gbe/evac040",
                year=2022,
                author="Wall et. al.",
                reasons={stdpopsim.CiteReason.DEM_MODEL},
            )
        ],
        # citations for generation time and mutation rate can be
        # found in species.py
        generation_time=11,
        mutation_rate=5.7 * 10e-9,
        demographic_events=demographic_events,
        population_configurations=[
            msprime.PopulationConfiguration(
                initial_size=335505, metadata=populations[0].asdict()
            )
        ],
    )


_species.add_demographic_model(_pap_anu())
